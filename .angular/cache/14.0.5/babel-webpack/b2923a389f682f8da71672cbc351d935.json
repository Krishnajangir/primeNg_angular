{"ast":null,"code":"import { readFile, readFileSync } from 'fs';\nimport { __awaiter } from 'tslib';\nimport { ResourceLoader } from '@angular/compiler';\nimport { CompilerFactory, NgModuleFactory } from '@angular/core';\nimport { platformDynamicServer, INITIAL_CONFIG, renderModuleFactory } from '@angular/platform-server';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n/** ResourceLoader implementation for loading files */\n\nclass FileLoader {\n  get(url) {\n    return new Promise((resolve, reject) => {\n      readFile(url, (err, data) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(data.toString());\n      });\n    });\n  }\n\n}\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\n\n\nclass CommonEngine {\n  constructor(moduleOrFactory, providers = []) {\n    this.moduleOrFactory = moduleOrFactory;\n    this.providers = providers;\n    this.factoryCacheMap = new Map();\n    this.templateCache = {};\n  }\n  /** Return an instance of the platformServer compiler */\n\n\n  getCompiler() {\n    const compilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n    return compilerFactory.createCompiler([{\n      providers: [{\n        provide: ResourceLoader,\n        useClass: FileLoader,\n        deps: []\n      }]\n    }]);\n  }\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n\n\n  render(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // if opts.document dosen't exist then opts.documentFilePath must\n      const doc = opts.document || (yield this.getDocument(opts.documentFilePath));\n      const extraProviders = [...(opts.providers || []), ...(this.providers || []), {\n        provide: INITIAL_CONFIG,\n        useValue: {\n          document: doc,\n          url: opts.url\n        }\n      }];\n      const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;\n      const factory = yield this.getFactory(moduleOrFactory);\n      return renderModuleFactory(factory, {\n        extraProviders\n      });\n    });\n  }\n  /** Return the factory for a given engine instance */\n\n\n  getFactory(moduleOrFactory) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // If module has been compiled AoT\n      if (moduleOrFactory instanceof NgModuleFactory) {\n        return moduleOrFactory;\n      } else {\n        // we're in JIT mode\n        const moduleFactory = this.factoryCacheMap.get(moduleOrFactory); // If module factory is cached\n\n        if (moduleFactory) {\n          return moduleFactory;\n        } // Compile the module and cache it\n\n\n        const factory = yield this.getCompiler().compileModuleAsync(moduleOrFactory);\n        this.factoryCacheMap.set(moduleOrFactory, factory);\n        return factory;\n      }\n    });\n  }\n  /** Retrieve the document from the cache or the filesystem */\n\n\n  getDocument(filePath) {\n    const doc = this.templateCache[filePath] = this.templateCache[filePath] || readFileSync(filePath).toString(); // As  promise so we can change the API later without breaking\n\n    return Promise.resolve(doc);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This holds a cached version of each index used.\n */\n\n\nconst templateCache = {};\n/**\n * This is an express engine for handling Angular Applications\n */\n\nfunction ngExpressEngine(setupOptions) {\n  const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);\n  return function (filePath, options, callback) {\n    try {\n      const renderOptions = Object.assign({}, options);\n\n      if (!setupOptions.bootstrap && !renderOptions.bootstrap) {\n        throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n      }\n\n      const req = renderOptions.req;\n      const res = renderOptions.res || req.res;\n      renderOptions.url = renderOptions.url || `${req.protocol}://${req.get('host') || ''}${req.originalUrl}`;\n      renderOptions.document = renderOptions.document || getDocument(filePath);\n      renderOptions.providers = renderOptions.providers || [];\n      renderOptions.providers = renderOptions.providers.concat(getReqResProviders(req, res));\n      engine.render(renderOptions).then(html => callback(null, html)).catch(callback);\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n/**\n * Get providers of the request and response\n */\n\n\nfunction getReqResProviders(req, res) {\n  const providers = [{\n    provide: REQUEST,\n    useValue: req\n  }];\n\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n\n  return providers;\n}\n/**\n * Get the document at the file path\n */\n\n\nfunction getDocument(filePath) {\n  return templateCache[filePath] = templateCache[filePath] || readFileSync(filePath).toString();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ngExpressEngine }; //# sourceMappingURL=express-engine.js.map","map":null,"metadata":{},"sourceType":"module"}