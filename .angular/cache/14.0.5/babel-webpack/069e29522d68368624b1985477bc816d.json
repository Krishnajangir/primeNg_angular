{"ast":null,"code":"import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, Input, ContentChildren, Output, NgModule } from '@angular/core';\nimport { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate } from 'primeng/api';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'primeng/ripple';\n\nfunction Sidebar_div_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function Sidebar_div_0_button_3_Template_button_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r4.close($event));\n    })(\"keydown.enter\", function Sidebar_div_0_button_3_Template_button_keydown_enter_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r6.close($event));\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.ariaCloseLabel);\n  }\n}\n\nfunction Sidebar_div_0_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a1, a2, a3, a4, a5, a6) {\n  return {\n    \"p-sidebar\": true,\n    \"p-sidebar-active\": a1,\n    \"p-sidebar-left\": a2,\n    \"p-sidebar-right\": a3,\n    \"p-sidebar-top\": a4,\n    \"p-sidebar-bottom\": a5,\n    \"p-sidebar-full\": a6\n  };\n};\n\nconst _c1 = function (a0, a1) {\n  return {\n    transform: a0,\n    transition: a1\n  };\n};\n\nconst _c2 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nfunction Sidebar_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1, 2);\n    ɵngcc0.ɵɵlistener(\"@panelState.start\", function Sidebar_div_0_Template_div_animation_panelState_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r7.onAnimationStart($event));\n    });\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(3, Sidebar_div_0_button_3_Template, 2, 1, \"button\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"div\", 5);\n    ɵngcc0.ɵɵprojection(5);\n    ɵngcc0.ɵɵtemplate(6, Sidebar_div_0_ng_container_6_Template, 1, 0, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r0.styleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c0, ctx_r0.visible, ctx_r0.position === \"left\" && !ctx_r0.fullScreen, ctx_r0.position === \"right\" && !ctx_r0.fullScreen, ctx_r0.position === \"top\" && !ctx_r0.fullScreen, ctx_r0.position === \"bottom\" && !ctx_r0.fullScreen, ctx_r0.fullScreen))(\"@panelState\", ɵngcc0.ɵɵpureFunction1(18, _c2, ɵngcc0.ɵɵpureFunction2(15, _c1, ctx_r0.transformOptions, ctx_r0.transitionOptions)))(\"ngStyle\", ctx_r0.style);\n    ɵngcc0.ɵɵattribute(\"aria-modal\", ctx_r0.modal);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.showCloseIcon);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.contentTemplate);\n  }\n}\n\nconst _c3 = [\"*\"];\nconst showAnimation = animation([style({\n  transform: '{{transform}}',\n  opacity: 0\n}), animate('{{transition}}')]);\nconst hideAnimation = animation([animate('{{transition}}', style({\n  transform: '{{transform}}',\n  opacity: 0\n}))]);\nlet Sidebar = /*#__PURE__*/(() => {\n  class Sidebar {\n    constructor(el, renderer, cd) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.blockScroll = false;\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.modal = true;\n      this.dismissible = true;\n      this.showCloseIcon = true;\n      this.closeOnEscape = true;\n      this.transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.visibleChange = new EventEmitter();\n      this._position = \"left\";\n      this._fullScreen = false;\n      this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n    }\n\n    ngAfterViewInit() {\n      this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    get visible() {\n      return this._visible;\n    }\n\n    set visible(val) {\n      this._visible = val;\n    }\n\n    get position() {\n      return this._position;\n    }\n\n    set position(value) {\n      this._position = value;\n\n      switch (value) {\n        case 'left':\n          this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n          break;\n\n        case 'right':\n          this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n          break;\n\n        case 'bottom':\n          this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n          break;\n\n        case 'top':\n          this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n          break;\n      }\n    }\n\n    get fullScreen() {\n      return this._fullScreen;\n    }\n\n    set fullScreen(value) {\n      this._fullScreen = value;\n      if (value) this.transformOptions = \"none\";\n    }\n\n    show() {\n      if (this.autoZIndex) {\n        this.container.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n      }\n\n      if (this.modal) {\n        this.enableModality();\n      }\n\n      this.onShow.emit({});\n    }\n\n    hide() {\n      this.onHide.emit({});\n\n      if (this.modal) {\n        this.disableModality();\n      }\n    }\n\n    close(event) {\n      this.hide();\n      this.visibleChange.emit(false);\n      event.preventDefault();\n    }\n\n    enableModality() {\n      if (!this.mask) {\n        this.mask = document.createElement('div');\n        this.mask.style.zIndex = String(parseInt(this.container.style.zIndex) - 1);\n        DomHandler.addMultipleClasses(this.mask, 'p-component-overlay p-sidebar-mask');\n\n        if (this.dismissible) {\n          this.maskClickListener = this.renderer.listen(this.mask, 'click', event => {\n            if (this.dismissible) {\n              this.close(event);\n            }\n          });\n        }\n\n        document.body.appendChild(this.mask);\n\n        if (this.blockScroll) {\n          DomHandler.addClass(document.body, 'p-overflow-hidden');\n        }\n      }\n    }\n\n    disableModality() {\n      if (this.mask) {\n        this.unbindMaskClickListener();\n        document.body.removeChild(this.mask);\n\n        if (this.blockScroll) {\n          DomHandler.removeClass(document.body, 'p-overflow-hidden');\n        }\n\n        this.mask = null;\n      }\n    }\n\n    onAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          this.container = event.element;\n          this.appendContainer();\n          this.show();\n\n          if (this.closeOnEscape) {\n            this.bindDocumentEscapeListener();\n          }\n\n          break;\n\n        case 'void':\n          this.hide();\n          this.unbindGlobalListeners();\n          break;\n      }\n    }\n\n    appendContainer() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.container);else DomHandler.appendChild(this.container, this.appendTo);\n      }\n    }\n\n    bindDocumentEscapeListener() {\n      const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n      this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', event => {\n        if (event.which == 27) {\n          if (parseInt(this.container.style.zIndex) === DomHandler.zindex + this.baseZIndex) {\n            this.close(event);\n          }\n        }\n      });\n    }\n\n    unbindDocumentEscapeListener() {\n      if (this.documentEscapeListener) {\n        this.documentEscapeListener();\n        this.documentEscapeListener = null;\n      }\n    }\n\n    unbindMaskClickListener() {\n      if (this.maskClickListener) {\n        this.maskClickListener();\n        this.maskClickListener = null;\n      }\n    }\n\n    unbindGlobalListeners() {\n      this.unbindMaskClickListener();\n      this.unbindDocumentEscapeListener();\n    }\n\n    ngOnDestroy() {\n      this.initialized = false;\n\n      if (this.visible) {\n        this.hide();\n      }\n\n      if (this.appendTo) {\n        this.el.nativeElement.appendChild(this.container);\n      }\n\n      this.unbindGlobalListeners();\n    }\n\n  }\n\n  Sidebar.ɵfac = function Sidebar_Factory(t) {\n    return new (t || Sidebar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Sidebar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Sidebar,\n    selectors: [[\"p-sidebar\"]],\n    contentQueries: function Sidebar_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    inputs: {\n      blockScroll: \"blockScroll\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      modal: \"modal\",\n      dismissible: \"dismissible\",\n      showCloseIcon: \"showCloseIcon\",\n      closeOnEscape: \"closeOnEscape\",\n      transitionOptions: \"transitionOptions\",\n      visible: \"visible\",\n      position: \"position\",\n      fullScreen: \"fullScreen\",\n      appendTo: \"appendTo\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      ariaCloseLabel: \"ariaCloseLabel\"\n    },\n    outputs: {\n      onShow: \"onShow\",\n      onHide: \"onHide\",\n      visibleChange: \"visibleChange\"\n    },\n    ngContentSelectors: _c3,\n    decls: 1,\n    vars: 1,\n    consts: [[\"role\", \"complementary\", 3, \"ngClass\", \"ngStyle\", \"class\", 4, \"ngIf\"], [\"role\", \"complementary\", 3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [1, \"p-sidebar-header\"], [\"type\", \"button\", \"class\", \"p-sidebar-close p-sidebar-icon p-link\", \"pRipple\", \"\", 3, \"click\", \"keydown.enter\", 4, \"ngIf\"], [1, \"p-sidebar-content\"], [4, \"ngTemplateOutlet\"], [\"type\", \"button\", \"pRipple\", \"\", 1, \"p-sidebar-close\", \"p-sidebar-icon\", \"p-link\", 3, \"click\", \"keydown.enter\"], [1, \"p-sidebar-close-icon\", \"pi\", \"pi-times\"]],\n    template: function Sidebar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, Sidebar_div_0_Template, 7, 20, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgStyle, ɵngcc2.Ripple],\n    styles: [\".p-sidebar{display:flex;flex-direction:column;position:fixed;transition:transform .3s}.p-sidebar-content{overflow-y:auto;position:relative}.p-sidebar-header{align-items:center;display:flex;justify-content:flex-end}.p-sidebar-icon{align-items:center;display:flex;justify-content:center}.p-sidebar-mask{transition-property:background-color}.p-sidebar-mask,.p-sidebar-mask.p-sidebar-mask-leave.p-component-overlay{background-color:transparent}.p-sidebar-left{height:100%;left:0;top:0;width:20rem}.p-sidebar-right{height:100%;right:0;top:0;width:20rem}.p-sidebar-top{height:10rem;left:0;top:0;width:100%}.p-sidebar-bottom{bottom:0;height:10rem;left:0;width:100%}.p-sidebar-full{height:100%;left:0;top:0;transition:none;width:100%}.p-sidebar-left.p-sidebar-sm,.p-sidebar-right.p-sidebar-sm{width:20rem}.p-sidebar-left.p-sidebar-md,.p-sidebar-right.p-sidebar-md{width:40rem}.p-sidebar-left.p-sidebar-lg,.p-sidebar-right.p-sidebar-lg{width:60rem}.p-sidebar-bottom.p-sidebar-sm,.p-sidebar-top.p-sidebar-sm{height:10rem}.p-sidebar-bottom.p-sidebar-md,.p-sidebar-top.p-sidebar-md{height:20rem}.p-sidebar-bottom.p-sidebar-lg,.p-sidebar-top.p-sidebar-lg{height:30rem}@media screen and (max-width:64em){.p-sidebar-left.p-sidebar-lg,.p-sidebar-left.p-sidebar-md,.p-sidebar-right.p-sidebar-lg,.p-sidebar-right.p-sidebar-md{width:20rem}}\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('panelState', [transition('void => visible', [useAnimation(showAnimation)]), transition('visible => void', [useAnimation(hideAnimation)])])]\n    },\n    changeDetection: 0\n  });\n  return Sidebar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SidebarModule = /*#__PURE__*/(() => {\n  class SidebarModule {}\n\n  SidebarModule.ɵfac = function SidebarModule_Factory(t) {\n    return new (t || SidebarModule)();\n  };\n\n  SidebarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SidebarModule\n  });\n  SidebarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, RippleModule]\n  });\n  return SidebarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SidebarModule, {\n    declarations: function () {\n      return [Sidebar];\n    },\n    imports: function () {\n      return [CommonModule, RippleModule];\n    },\n    exports: function () {\n      return [Sidebar];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Sidebar, SidebarModule }; //# sourceMappingURL=primeng-sidebar.js.map","map":null,"metadata":{},"sourceType":"module"}